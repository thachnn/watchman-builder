diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3dbcd68..d6cd11e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,7 +23,6 @@ option(BUILD_SHARED_LIBS
 # is generally discouraged.
 mark_as_advanced(BUILD_SHARED_LIBS)
 
-enable_testing()
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
 include_directories("${CMAKE_CURRENT_SOURCE_DIR}/external/install/include")
@@ -81,6 +80,12 @@ set(WATCHMAN_VERSION_OVERRIDE "" CACHE STRING "Use this version code for \
 set(WATCHMAN_BUILDINFO_OVERRIDE "" CACHE STRING "Use this version code for \
     Watchman build info instead of the default (nothing)")
 
+if (WATCHMAN_BUILDINFO_OVERRIDE)
+  set(BUILD_INFO "${WATCHMAN_BUILDINFO_OVERRIDE}")
+elseif(DEFINED ENV{WATCHMAN_BUILDINFO_OVERRIDE})
+  set(BUILD_INFO "$ENV{WATCHMAN_BUILDINFO_OVERRIDE}")
+endif()
+
 if (WATCHMAN_VERSION_OVERRIDE)
   set(PACKAGE_VERSION "${WATCHMAN_VERSION_OVERRIDE}")
 elseif(DEFINED ENV{WATCHMAN_VERSION_OVERRIDE})
@@ -114,10 +119,12 @@ set(PACKAGE_TARNAME   "${PACKAGE_NAME}-${PACKAGE_VERSION}")
 set(PACKAGE_BUGREPORT "https://github.com/facebook/watchman/issues")
 project(${PACKAGE_NAME} CXX C)
 
-find_package(GMock MODULE REQUIRED)
-include_directories(${GMOCK_INCLUDEDIR} ${LIBGMOCK_INCLUDE_DIR})
-include(GoogleTest)
-enable_testing()
+if (BUILD_TESTING)
+  find_package(GMock MODULE REQUIRED)
+  include_directories(${GMOCK_INCLUDEDIR} ${LIBGMOCK_INCLUDE_DIR})
+  include(GoogleTest)
+  enable_testing()
+endif()
 
 include(FBThriftCppLibrary)
 include(CheckFunctionExists)
@@ -136,6 +143,9 @@ endfunction()
 file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/config.h.new" "#pragma once\n")
 
 if(NOT WIN32)
+  set(WATCHMAN_CONFIG_FILE "/etc/watchman.json" CACHE STRING
+    "Path of the default configuration file")
+
   set(WATCHMAN_STATE_DIR "${CMAKE_INSTALL_PREFIX}/var/run/watchman" CACHE STRING
     "Run-time path of the persistent state directory")
   set(INSTALL_WATCHMAN_STATE_DIR OFF CACHE BOOL
@@ -144,6 +154,9 @@ if(NOT WIN32)
     is owned by a non-privileged user but where the WATCHMAN_STATE_DIR requires
     administrative rights to create and set its permissions.")
 else()
+  set(WATCHMAN_CONFIG_FILE "C:/ProgramData/facebook/watchman.json" CACHE STRING
+    "Path of the default configuration file")
+
   set(WATCHMAN_STATE_DIR)
   set(INSTALL_WATCHMAN_STATE_DIR)
 endif()
@@ -156,12 +169,7 @@ if(WATCHMAN_STATE_DIR AND INSTALL_WATCHMAN_STATE_DIR)
 endif()
 
 config_h("// Generated by cmake")
-if(WIN32)
-  config_h("#define WATCHMAN_CONFIG_FILE \
-\"C:/ProgramData/facebook/watchman.json\"")
-else()
-  config_h("#define WATCHMAN_CONFIG_FILE \"/etc/watchman.json\"")
-endif()
+config_h("#define WATCHMAN_CONFIG_FILE \"${WATCHMAN_CONFIG_FILE}\"")
 
 if(WATCHMAN_STATE_DIR)
   config_h("#define WATCHMAN_STATE_DIR \"${WATCHMAN_STATE_DIR}\"")
@@ -357,6 +365,9 @@ else()
   find_program(YARN yarn)
 endif()
 
+option(WITHOUT_PYTHON "Disable python bindings" OFF)
+if (NOT WITHOUT_PYTHON)
+
 if(WIN32)
   find_package(Python3 COMPONENTS Interpreter Development)
 
@@ -430,6 +441,8 @@ else()
   endif()
 endif()
 
+endif()
+
 if(WIN32)
   if(Python3_Interpreter_FOUND AND NODE AND YARN)
     add_subdirectory(node/bser)
@@ -457,7 +470,7 @@ if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
   set(CMAKE_STATIC_LIBRARY_FLAGS
     "${CMAKE_STATIC_LIBRARY_FLAGS} /DEBUG /MT /OPT:NOREF")
 else()
-  set(CMAKE_CXX_FLAGS_COMMON "-g -Wall -Wextra -std=gnu++17")
+  set(CMAKE_CXX_FLAGS_COMMON "-Wall -Wextra -std=gnu++17")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_COMMON}")  # for cmake 3.0
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_COMMON}")
   set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_COMMON} -O3")
@@ -738,6 +751,8 @@ endif()
 
 install(TARGETS watchman RUNTIME DESTINATION bin)
 
+if (BUILD_TESTING)
+
 set(tests)
 # Helper function to define a unit test executable
 function(t_test NAME)
@@ -795,3 +810,5 @@ t_test(childproc tests/childproc.cpp)
 t_test(result tests/ResultTest.cpp)
 t_test(cache tests/CacheTest.cpp)
 t_test(MapUtilTest tests/MapUtilTest.cpp)
+
+endif()
diff --git a/build/fbcode_builder/CMake/FBCompilerSettingsUnix.cmake b/build/fbcode_builder/CMake/FBCompilerSettingsUnix.cmake
index c095ec8..408fad5 100644
--- a/build/fbcode_builder/CMake/FBCompilerSettingsUnix.cmake
+++ b/build/fbcode_builder/CMake/FBCompilerSettingsUnix.cmake
@@ -6,6 +6,6 @@
 # to these shared compiler settings in order to avoid accidentally
 # breaking a build in another project!
 
-set(CMAKE_CXX_FLAGS_COMMON "-g -Wall -Wextra -Wno-deprecated -Wno-deprecated-declarations")
+set(CMAKE_CXX_FLAGS_COMMON "-Wall -Wextra -Wno-deprecated -Wno-deprecated-declarations")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_COMMON}")
 set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_COMMON} -O3")
